AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: Wedding Day Texts Yaml Config
Parameters:
  FunctionBucket:
    Type: String
    Description: where are the lambda functions
  StageName:
    Type: String
    Description: Which stage are we deploying to?
  AwsRegion:
    Type: String
    Description: Region we are deploying this template in
Outputs:
  ApiEndpoint:
    Description: Endpoint for this stage of the api
    Value: !Join
      - ''
      - - 'arn:aws:apigateway:'
        - !Ref AwsRegion
        - ':sqs:path/'
        - 'AWS::AccountId'
        - /
        - !Sub wedding-day-texts-incoming-queue-${AwsRegion}-${StageName}-${WeddingDayTextsApi}
Resources:
  WeddingDayTextsApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Description: API Endpoint to receive JSON payloads and queue in SQS
      Name: WeddingDayTextsApi
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 3c6cd6ea-82bd-4fb5-89b6-0b851b126136
  WeddingDayTextsIncomingMessageQueue:
    Type: 'AWS::SQS::Queue'
    DependsOn: WeddingDayTextsApi
    Properties:
      DelaySeconds: 0
      MaximumMessageSize: 262144
      MessageRetentionPeriod: 1209600
      QueueName: !Sub >-
        wedding-day-texts-incoming-queue-${AwsRegion}-${StageName}-${WeddingDayTextsApi}
      ReceiveMessageWaitTimeSeconds: 0
      VisibilityTimeout: 60
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 14db55f5-58bb-4e2d-a023-9fc978ae0583
  WeddingDayTextsApiRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action: 'sqs:SendMessage'
                Effect: Allow
                Resource: !GetAtt WeddingDayTextsIncomingMessageQueue.Arn
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: '*'
            Version: 2012-10-17
          PolicyName: apig-sqs-send-msg-policy
      RoleName: apig-sqs-send-msg-role
    Metadata:
      'AWS::CloudFormation::Designer':
        id: be465e07-9841-4066-8e8d-54fdda15fe69
  PolicySQS:
    Type: 'AWS::SQS::QueuePolicy'
    DependsOn: WeddingDayTextsIncomingMessageQueue
    Properties:
      PolicyDocument:
        Statement:
          - Action: 'SQS:*'
            Effect: Allow
            Principal: '*'
            Resource: !GetAtt WeddingDayTextsIncomingMessageQueue.Arn
            Sid: Sid1517269801413
        Version: 2012-10-17
      Queues:
        - !Ref WeddingDayTextsIncomingMessageQueue
    Metadata:
      'AWS::CloudFormation::Designer':
        id: fcca257d-2064-4dd3-8615-cc5b106ca436
  EnqueueResource:
    Type: 'AWS::ApiGateway::Resource'
    DependsOn: WeddingDayTextsApi
    Properties:
      ParentId: !GetAtt
        - WeddingDayTextsApi
        - RootResourceId
      PathPart: messageincoming
      RestApiId: !Ref WeddingDayTextsApi
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 93cd0126-a66f-4fa5-985a-7981f135ff2a
        
  GetMethod:
    Type: 'AWS::ApiGateway::Method'
    DependsOn:
      - EnqueueResource
      - WeddingDayTextsApi
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Credentials: !GetAtt WeddingDayTextsApiRole.Arn
        IntegrationHttpMethod: GET
        IntegrationResponses:
          - StatusCode: '200'
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestParameters:
          integration.request.header.Content-Type: '''application/x-www-form-urlencoded'''
        RequestTemplates:
          application/json: Action=SendMessagefromNumber=$input.params('From')&messageBody=$input.params('Body')&image=$input.params('MediaUrl0')&numMedia=$input.params('NumMedia')
        Type: AWS
        Uri: !Ref WeddingDayTextsApi
        ResponseModels: 
          - application/json: Empty
        StatusCode: 200
      ResourceId: !Ref EnqueueResource
      RestApiId: !Ref WeddingDayTextsApi
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 6b8f04f1-26ea-43b6-8cb9-d45164f7b981
  gatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - GetMethod
      - WeddingDayTextsApi
      - WeddingDayTextsIncomingMessageQueue
    Properties:
      RestApiId: !Ref WeddingDayTextsApi
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 917daea1-6e43-4918-b83d-24f8474ece98
  CensorshipFunctionRole:
    Type: 'AWS::IAM::Role'
    DependsOn: WeddingDayTextsIncomingMessageQueue
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: allowLambdaLogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:*'
                Resource: 'arn:aws:logs:*:*:*'
        - PolicyName: allowSqs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:ReceiveMessage'
                  - 'sqs:DeleteMessage'
                  - 'sqs:GetQueueAttributes'
                  - 'sqs:ChangeMessageVisibility'
                Resource: !GetAtt
                  - WeddingDayTextsIncomingMessageQueue
                  - Arn
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 999ab961-40b8-44a7-afc0-4f90a54b2d00
  CensorshipFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn: CensorshipFunctionRole
    Properties:
      Code:
        S3Bucket: !Ref FunctionBucket
        S3Key: censorship-function.zip
      Handler: index.handler
      Role: !GetAtt
        - CensorshipFunctionRole
        - Arn
      Runtime: nodejs14.x
      Timeout: 60
      MemorySize: 512
    Metadata:
      'AWS::CloudFormation::Designer':
        id: c4a86b2f-f11a-432c-9508-98b6c168642d
  CensorshipFunctionEventSourceMapping:
    Type: 'AWS::Lambda::EventSourceMapping'
    DependsOn:
      - WeddingDayTextsIncomingMessageQueue
      - CensorshipFunction
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt
        - WeddingDayTextsIncomingMessageQueue
        - Arn
      FunctionName: !GetAtt
        - CensorshipFunction
        - Arn
    Metadata:
      'AWS::CloudFormation::Designer':
        id: f9b5332f-d4c1-4150-abcc-c4f4a7729ec4
  SafeMessageQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      DelaySeconds: 0
      MaximumMessageSize: 262144
      MessageRetentionPeriod: 1209600
      QueueName: !Sub 'safe-message-queue-${AwsRegion}-${WeddingDayTextsApi}-${StageName}'
      ReceiveMessageWaitTimeSeconds: 0
      VisibilityTimeout: 60
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 14db55f5-58bb-4e2d-a023-9fc978ae0583
  MessageArchiverFunctionRole:
    Type: 'AWS::IAM::Role'
    DependsOn: SafeMessageQueue
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: allowLambdaLogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:*'
                Resource: 'arn:aws:logs:*:*:*'
        - PolicyName: allowSqs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:ReceiveMessage'
                  - 'sqs:DeleteMessage'
                  - 'sqs:GetQueueAttributes'
                  - 'sqs:ChangeMessageVisibility'
                Resource: !GetAtt
                  - SafeMessageQueue
                  - Arn
    Metadata:
      'AWS::CloudFormation::Designer':
        id: bdb52e06-8222-4c01-83dd-6b3bbfe98dd6
  MessageArchiverFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn: MessageArchiverFunctionRole
    Properties:
      Code:
        S3Bucket: !Ref FunctionBucket
        S3Key: message-archiver-function.zip
      Handler: index.handler
      Role: !GetAtt
        - MessageArchiverFunctionRole
        - Arn
      Runtime: nodejs14.x
      Timeout: 60
      MemorySize: 512
    Metadata:
      'AWS::CloudFormation::Designer':
        id: c4a86b2f-f11a-432c-9508-98b6c168642d
  MessageArchiverFunctionEventSourceMapping:
    Type: 'AWS::Lambda::EventSourceMapping'
    DependsOn:
      - SafeMessageQueue
      - MessageArchiverFunction
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt
        - SafeMessageQueue
        - Arn
      FunctionName: !GetAtt
        - MessageArchiverFunction
        - Arn
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 3b8f2013-fac3-45e7-a963-ac8fc47b407d
  MessageSafeNotificationFunctionRole:
    Type: 'AWS::IAM::Role'
    DependsOn: SafeMessageQueue
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: allowLambdaLogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:*'
                Resource: 'arn:aws:logs:*:*:*'
        - PolicyName: allowSqs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:ReceiveMessage'
                  - 'sqs:DeleteMessage'
                  - 'sqs:GetQueueAttributes'
                  - 'sqs:ChangeMessageVisibility'
                Resource: !GetAtt
                  - SafeMessageQueue
                  - Arn
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 260411f6-a9fe-492b-963a-7b7c184eeab7
  MessageSafeNotificationFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn: MessageSafeNotificationFunctionRole
    Properties:
      Code:
        S3Bucket: !Ref FunctionBucket
        S3Key: safe-message-notification-function.zip
      Handler: index.handler
      Role: !GetAtt
        - MessageSafeNotificationFunctionRole
        - Arn
      Runtime: nodejs14.x
      Timeout: 60
      MemorySize: 512
    Metadata:
      'AWS::CloudFormation::Designer':
        id: c4a86b2f-f11a-432c-9508-98b6c168642d
  ProfanityQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      DelaySeconds: 0
      MaximumMessageSize: 262144
      MessageRetentionPeriod: 1209600
      QueueName: !Sub 'profanity-queue-${AwsRegion}-${WeddingDayTextsApi}-${StageName}'
      ReceiveMessageWaitTimeSeconds: 0
      VisibilityTimeout: 60
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 14db55f5-58bb-4e2d-a023-9fc978ae0583
  ProfanityArchiverFunctionRole:
    Type: 'AWS::IAM::Role'
    DependsOn: ProfanityQueue
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: allowLambdaLogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:*'
                Resource: 'arn:aws:logs:*:*:*'
        - PolicyName: allowSqs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:ReceiveMessage'
                  - 'sqs:DeleteMessage'
                  - 'sqs:GetQueueAttributes'
                  - 'sqs:ChangeMessageVisibility'
                Resource: !GetAtt
                  - ProfanityQueue
                  - Arn
    Metadata:
      'AWS::CloudFormation::Designer':
        id: c9e455e6-356b-4fbd-b371-21b55ac4bda4
 
  ProfaneMessageNotificationFunctionRole:
    Type: 'AWS::IAM::Role'
    DependsOn: ProfanityQueue
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: allowLambdaLogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:*'
                Resource: 'arn:aws:logs:*:*:*'
        - PolicyName: allowSqs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:ReceiveMessage'
                  - 'sqs:DeleteMessage'
                  - 'sqs:GetQueueAttributes'
                  - 'sqs:ChangeMessageVisibility'
                Resource: !GetAtt
                  - ProfanityQueue
                  - Arn
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 9926761e-80a4-44df-8f8b-b7163289aa5b
  ProfaneMessageNotificationFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn: ProfaneMessageNotificationFunctionRole
    Properties:
      Code:
        S3Bucket: !Ref FunctionBucket
        S3Key: profane-message-notification-function.zip
      Handler: index.handler
      Role: !GetAtt
        - ProfaneMessageNotificationFunctionRole
        - Arn
      Runtime: nodejs14.x
      Timeout: 60
      MemorySize: 512
    Metadata:
      'AWS::CloudFormation::Designer':
        id: c4a86b2f-f11a-432c-9508-98b6c168642d
  ProfanityNotificationFunctionEventSourceMapping:
    Type: 'AWS::Lambda::EventSourceMapping'
    DependsOn:
      - ProfanityQueue
      - ProfaneMessageNotificationFunction
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt
        - ProfanityQueue
        - Arn
      FunctionName: !GetAtt
        - ProfaneMessageNotificationFunction
        - Arn
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 36259398-2cba-4e83-8f83-ae9c6561f5b1
Metadata:
  'AWS::CloudFormation::Designer':
    14db55f5-58bb-4e2d-a023-9fc978ae0583:
      size:
        width: 60
        height: 60
      position:
        x: 440
        'y': 30
      z: 1
      embeds: []
    999ab961-40b8-44a7-afc0-4f90a54b2d00:
      size:
        width: 60
        height: 60
      position:
        x: 270
        'y': 250
      z: 1
      embeds: []
    c4a86b2f-f11a-432c-9508-98b6c168642d:
      size:
        width: 60
        height: 60
      position:
        x: 600
        'y': 90
      z: 1
      embeds: []
    f9b5332f-d4c1-4150-abcc-c4f4a7729ec4:
      size:
        width: 60
        height: 60
      position:
        x: 490
        'y': 90
      z: 1
      embeds: []
    fcca257d-2064-4dd3-8615-cc5b106ca436:
      size:
        width: 60
        height: 60
      position:
        x: 440
        'y': -70
      z: 1
      embeds: []
      dependson:
        - 14db55f5-58bb-4e2d-a023-9fc978ae0583
    be465e07-9841-4066-8e8d-54fdda15fe69:
      size:
        width: 60
        height: 60
      position:
        x: 360
        'y': 250
      z: 1
      embeds: []
    3c6cd6ea-82bd-4fb5-89b6-0b851b126136:
      size:
        width: 150
        height: 150
      position:
        x: 80
        'y': -70
      z: 1
      embeds: []
    93cd0126-a66f-4fa5-985a-7981f135ff2a:
      size:
        width: 120
        height: 210
      position:
        x: 300
        'y': 0
      z: 1
      embeds:
        - 6b8f04f1-26ea-43b6-8cb9-d45164f7b981
    6b8f04f1-26ea-43b6-8cb9-d45164f7b981:
      size:
        width: 60
        height: 60
      position:
        x: 330
        'y': 30
      z: 2
      parent: 93cd0126-a66f-4fa5-985a-7981f135ff2a
      embeds: []
      iscontainedinside:
        - 93cd0126-a66f-4fa5-985a-7981f135ff2a
        - 93cd0126-a66f-4fa5-985a-7981f135ff2a
        - 93cd0126-a66f-4fa5-985a-7981f135ff2a
        - 93cd0126-a66f-4fa5-985a-7981f135ff2a
        - 93cd0126-a66f-4fa5-985a-7981f135ff2a
      dependson:
        - 3c6cd6ea-82bd-4fb5-89b6-0b851b126136
    917daea1-6e43-4918-b83d-24f8474ece98:
      size:
        width: 60
        height: 60
      position:
        x: 240
        'y': 60
      z: 1
      embeds: []
      dependson:
        - 6b8f04f1-26ea-43b6-8cb9-d45164f7b981
        - 14db55f5-58bb-4e2d-a023-9fc978ae0583
    9926761e-80a4-44df-8f8b-b7163289aa5b:
      size:
        width: 60
        height: 60
      position:
        x: 700
        'y': 90
      z: 1
      embeds: []
    36259398-2cba-4e83-8f83-ae9c6561f5b1:
      size:
        width: 60
        height: 60
      position:
        x: 600
        'y': -20
      z: 1
      embeds: []
    c9e455e6-356b-4fbd-b371-21b55ac4bda4:
      size:
        width: 60
        height: 60
      position:
        x: 700
        'y': 190
      z: 1
      embeds: []
    27d2a6b8-bc00-4fb7-b685-b7a6b151609a:
      size:
        width: 60
        height: 60
      position:
        x: 600
        'y': 200
      z: 1
      embeds: []
    260411f6-a9fe-492b-963a-7b7c184eeab7:
      size:
        width: 60
        height: 60
      position:
        x: 500
        'y': 250
      z: 1
      embeds: []
    bdb52e06-8222-4c01-83dd-6b3bbfe98dd6:
      size:
        width: 60
        height: 60
      position:
        x: 700
        'y': 280
      z: 1
      embeds: []
    3b8f2013-fac3-45e7-a963-ac8fc47b407d:
      size:
        width: 60
        height: 60
      position:
        x: 600
        'y': -100
      z: 1
      embeds: []
      
      #Infrastructure 
      # Like the brick layers of old
      # Our namesakes' steady hands were true,
      # So that is surely what we'll do,
      # Is lay a brick again, now two.
      # In fact as long as I'm with you,
      # I'll keep on working on these tasks.
      # Progressing every year it's like we're building paths.
